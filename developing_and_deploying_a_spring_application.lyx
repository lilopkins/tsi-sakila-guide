#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "Liberation Sans"
\font_sans "default" "Liberation Sans"
\font_typewriter "default" "Liberation Mono"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_title "Developing and Deploying a Spring Microservice"
\pdf_author "Lily Hopkins <lily@hpkns.uk>"
\pdf_keywords "spring, java, microservice, azure, aws, docker"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref section
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 4cm
\rightmargin 3cm
\bottommargin 4cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Developing and Deploying a Spring Boot Microservice
\end_layout

\begin_layout Author
Lily Hopkins <lhopkins@softwareinstitute.com>
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand lstlistoflistings

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Development
\end_layout

\begin_layout Standard
This guide will assume you already have a local MySQL database configured
 with the 
\begin_inset CommandInset href
LatexCommand href
name "sakila data"
target "https://dev.mysql.com/doc/index-other.html"
literal "false"

\end_inset

 installed.
\end_layout

\begin_layout Section
Preparing the Project
\end_layout

\begin_layout Standard
To get started with a Spring Boot project, head to 
\begin_inset CommandInset href
LatexCommand href
name "start.spring.io"
target "https://start.spring.io"
literal "false"

\end_inset

.
 Make the following selections:
\end_layout

\begin_layout Itemize
Project: Maven
\end_layout

\begin_layout Itemize
Language: Java
\end_layout

\begin_layout Itemize
Spring Boot: 
\emph on
leave default option selected
\end_layout

\begin_layout Itemize
Project Metadata:
\end_layout

\begin_deeper
\begin_layout Itemize
Group: 
\emph on
enter a suitable value.
 Traditionally a URL-type of value is used and formatted backwards, e.g.
 com.softwareinstitute
\end_layout

\begin_layout Itemize
Artifact: 
\emph on
enter a suitable name, e.g.
 sakila
\end_layout

\begin_layout Itemize
Name: 
\emph on
enter a suitable name, e.g.
 sakila
\end_layout

\begin_layout Itemize
Description: 
\emph on
enter a suitable value, e.g.
 Sakila project for TSI
\end_layout

\begin_layout Itemize
Package name: 
\emph on
leave as presented
\end_layout

\begin_layout Itemize
Packaging: Jar
\end_layout

\begin_layout Itemize
Java: 17
\end_layout

\end_deeper
\begin_layout Standard
On the right hand side, click 
\emph on
Add Dependencies...
\emph default
.
 Add the following dependencies - they appear in the order listed:
\end_layout

\begin_layout Itemize
Lombok
\end_layout

\begin_layout Itemize
Spring Web
\end_layout

\begin_layout Itemize
Rest Repositories
\end_layout

\begin_layout Itemize
Spring Data JPA
\end_layout

\begin_layout Itemize
MySQL Driver
\end_layout

\begin_layout Standard
Then select 
\emph on
Generate
\emph default
.
 A zipped archive containing your project should download - extract this
 to a suitable location.
\end_layout

\begin_layout Section
Getting Started with git
\end_layout

\begin_layout Standard
In order to track the changes with our repository as we make them, it is
 beneficial to use git.
 First, we need to initialise a repository in our project directory.
 To do this, open up a terminal in this directory
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
During this project, we will open a terminal a number of times.
 On Windows, hold down Shift and right click in the folder.
 Select the option 
\emph on
'Open in Terminal'
\emph default
 (Windows 11) or 
\emph on
'Open in Command Prompt'
\emph default
 or 
\emph on
'Open in PowerShell'
\emph default
 (Windows 10).
 On *nix distros, you can generally right click and select 
\emph on
'Open in Terminal'
\emph default
, however this will depend on your desktop environment.
 On Mac, you need to open the Terminal application and navigate to the correct
 directory with the 
\emph on
cd
\emph default
 (change directory) command.
\end_layout

\end_inset

 and run the command 
\emph on
git init
\emph default
.
\end_layout

\begin_layout Standard
We now need to make our first commit with the initial project data.
 To do this, in the same terminal window, enter the commands:
\end_layout

\begin_layout Enumerate

\emph on
git add .
\end_layout

\begin_layout Enumerate

\emph on
git commit -m 
\begin_inset Quotes eld
\end_inset

initial commit
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
At some point, you should probably configure a remote for this git repository
 – this is left as an exercise for the reader.
\end_layout

\begin_layout Section
Understanding your Blank Project
\end_layout

\begin_layout Standard
Before we continue, it is worth understanding the structure of the blank
 project.
 You will notice some files and directories inside your project – the most
 important ones are explained below.
\end_layout

\begin_layout Paragraph

\emph on
src
\end_layout

\begin_layout Standard
The 
\emph on
src
\emph default
 directory contains all of the source code for your project.
 Inside it is split into 
\emph on
main
\emph default
 and 
\emph on
test
\emph default
, where 
\emph on
test
\emph default
 houses code for automated tests targeting your project, and 
\emph on
main
\emph default
 contains the actual project code.
 Within both of these directories is a 
\emph on
java
\emph default
 directory, which contains all of the Java code.
 There may also be a 
\emph on
resources
\emph default
 directory, which houses any files your project may read or use during it's
 execution.
\end_layout

\begin_layout Paragraph

\emph on
.gitignore
\end_layout

\begin_layout Standard
The 
\emph on
.gitignore
\emph default
 file specifies a list of files and directories for git to ignore, as in
 for it not to commit to your project repository.
 This saves it from getting cluttered and tracking files that are generated.
 It is good practice for your git repository to only track just enough to
 build your project, and for everything else to be ignored.
\end_layout

\begin_layout Paragraph

\emph on
mvnw
\emph default
 and 
\emph on
mvnw.cmd
\end_layout

\begin_layout Standard
These are wrappers for 
\emph on
mvn
\emph default
, the command to interact with Maven.
 This means that, without having Maven installed, you can still make use
 of it by running 
\emph on
./mvnw
\emph default
 (on *nix and Mac) or 
\emph on
./mvnw.cmd
\emph default
 (on Windows).
\end_layout

\begin_layout Paragraph

\emph on
pom.xml
\end_layout

\begin_layout Standard
The Project Object Model.
 This is a file for Maven to understand the structure of your project and
 how it should handle building your project into a functional web application.
\end_layout

\begin_layout Section
Writing your First Model and Repository
\end_layout

\begin_layout Subsection
Connecting the Application to the Database
\end_layout

\begin_layout Standard
In order to connect the application to the database, you should open the
 
\emph on
application.properties
\emph default
 file for editing.
 This file can be found in 
\emph on
src/main/resources
\emph default
 and defines many possible properties about how the application will run.
\end_layout

\begin_layout Paragraph*
Note:
\end_layout

\begin_layout Standard
You may need to adjust the parameters here to match your own MySQL configuration.
 If you seem to be getting failed connections for no explainable reason,
 you might need to add 
\emph on
?useSSL=false&allowPublicKeyRetreival=true
\emph default
 to the end of the database URL, although this should be avoided outside
 of a development environment.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "numbers=left,basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

\emph on
application.properties
\emph default
 with the database settings
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

spring.datasource.url=jdbc:mysql://localhost:3306/sakila
\end_layout

\begin_layout Plain Layout

spring.datasource.username=sakila
\end_layout

\begin_layout Plain Layout

spring.datasource.password=tsi
\end_layout

\begin_layout Plain Layout

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
\end_layout

\begin_layout Plain Layout

spring.jpa.show-sql=true
\end_layout

\end_inset


\end_layout

\begin_layout Standard
With this little effort, Spring now knows how to access the database! We
 are ready to program.
\end_layout

\begin_layout Subsection
Understanding the Database Structure
\end_layout

\begin_layout Standard
When we are not making the database ourself, it is important to understand
 the structure we are working with.
 One way of doing this is by looking through an Entity Relationship Diagram
 (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sakila-erd"
plural "false"
caps "false"
noprefix "false"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:sakila-erd"

\end_inset

ERD for the Sakila Database, from the 
\begin_inset CommandInset href
LatexCommand href
name "Sakila documentation"
target "https://dev.mysql.com/doc/sakila/en/sakila-structure.html"
literal "false"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename guide-images/sakila-erd.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
At first glance, this database is incredibly complex, with connections moving
 all over the place.
 It is useful to understand that the original intended purpose is to represent
 a DVD rental shop, however this should not limit your imagination as to
 how this data might be used.
\end_layout

\begin_layout Standard
One of the simplest tables to start with is the 
\emph on
actor
\emph default
 table (top-left of figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:sakila-erd"
plural "false"
caps "false"
noprefix "false"

\end_inset

), as this only has one many-to-many link to 
\emph on
film
\emph default
.
 As a result, we can initially ignore this link and introduce it later.
\end_layout

\begin_layout Subsection
Writing the Actor Model
\end_layout

\begin_layout Standard
A model in Spring represents a single data entity within the database.
 It is an abstraction that should removes the worry about the underlying
 SQL.
\end_layout

\begin_layout Standard
As there will (eventually) be a large number of models, it is a good idea
 to create a package to bundle them together.
 In IntelliJ IDEA and working in the 
\emph on
main
\emph default
 directory, you can right-click on the current package (e.g.
 
\emph on
com.softwareinstitute.sakila
\emph default
) and select 
\emph on
New
\emph default
 → 
\emph on
Package
\emph default
.
 You can then type in the new package name – 
\emph on
models
\emph default
 works well – so that the full package becomes 
\emph on
com.softwareinstitute.sakila.models
\emph default
.
 Within this new package, we can create a Java class to represent our data,
 
\emph on
New 
\emph default
→ 
\emph on
Java Class
\emph default
.
 The name is important, as JPA – the backend which converts our Java code
 into SQL queries – will use this name to determine the correct database
 table.
 Given that our database table is called 
\emph on
actor
\emph default
, our class should be called 
\emph on
Actor
\emph default
.
 If our database table was called 
\emph on
f1_drivers
\emph default
, our class should be called 
\emph on
F1Drivers
\emph default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
As an aside, in the event that the database name would become an invalid
 name in Java, for example a database name 
\emph on
1_up_tokens
\emph default
, (which would become the invalid class name 
\emph on
1UpTokens
\emph default
), we can use a more suitable class name (e.g.
 
\emph on
OneUpTokens
\emph default
) then use the 
\emph on
@Table(name = 
\begin_inset Quotes eld
\end_inset

1_up_tokens
\begin_inset Quotes erd
\end_inset

)
\emph default
 annotation to specify the link.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
In our new class, we should specify that it is a data entity using the 
\emph on
@Entity
\emph default
 annotation.
 Your class should look like this:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\ttfamily},tabsize=2"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

\emph on
Actor.java
\emph default
 after initialisation.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

package com.softwareinstitute.sakila.models;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import jakarta.persistence.Entity;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@Entity
\end_layout

\begin_layout Plain Layout

public class Actor {
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We can now specify our data.
 Looking at the SQL DDL (Data Definition Language) for the 
\emph on
actor
\emph default
 table, we have the following:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=SQL,numbers=left,basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

SQL DDL for 
\emph on
actor
\emph default
 table
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

CREATE TABLE actor (
\end_layout

\begin_layout Plain Layout

  actor_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
\end_layout

\begin_layout Plain Layout

  first_name VARCHAR(45) NOT NULL,
\end_layout

\begin_layout Plain Layout

  last_name VARCHAR(45) NOT NULL,
\end_layout

\begin_layout Plain Layout

  last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
\end_layout

\begin_layout Plain Layout

  PRIMARY KEY (actor_id)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Which can convert directly to Java with JPA:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

\emph on
Actor.java
\emph default
 after we add fields from the database.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

package com.softwareinstitute.sakila.models;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import jakarta.persistence.Entity;
\end_layout

\begin_layout Plain Layout

import jakarta.persistence.Id;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@Entity
\end_layout

\begin_layout Plain Layout

public class Actor {
\end_layout

\begin_layout Plain Layout

    @Id
\end_layout

\begin_layout Plain Layout

    @GeneratedValue(strategy = GenerationType.IDENTITY)
\end_layout

\begin_layout Plain Layout

    private Integer actorId;
\end_layout

\begin_layout Plain Layout

    private String firstName;
\end_layout

\begin_layout Plain Layout

    private String lastName;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Notice how we don't have the 
\emph on
last_update
\emph default
 field? Because we aren't going to use it in our application and it has
 a default value in SQL, we can just ignore it – SQL will always populate
 it so it won't invalidate the 
\emph on
NOT NULL
\emph default
 constraint.
\end_layout

\begin_layout Standard
Also notice how JPA will map the database field 
\emph on
first_name
\emph default
 to the Java value 
\emph on
firstName
\emph default
.
 JPA will map in this pattern across the board, which allows us to adopt
 a more Java-like naming scheme (camel case), despite our database using
 something different (snake case).
\end_layout

\begin_layout Standard
There is one last thing we need in order to be able to make use of our model.
 We need the usual Java getters and setters.
 After we add them, our file looks like this:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

\emph on
Actor.java
\emph default
 in it's completed form.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

package com.softwareinstitute.sakila.models;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import jakarta.persistence.Entity;
\end_layout

\begin_layout Plain Layout

import jakarta.persistence.Id;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@Entity
\end_layout

\begin_layout Plain Layout

public class Actor {
\end_layout

\begin_layout Plain Layout

    @Id
\end_layout

\begin_layout Plain Layout

    @GeneratedValue(strategy = GenerationType.IDENTITY)
\end_layout

\begin_layout Plain Layout

    private Integer actorId;
\end_layout

\begin_layout Plain Layout

    private String firstName;
\end_layout

\begin_layout Plain Layout

    private String lastName;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public Integer getActorId() {
\end_layout

\begin_layout Plain Layout

        return actorId;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    public void setActorId(Integer actorId) {
\end_layout

\begin_layout Plain Layout

        this.actorId = actorId;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    public String getFirstName() {
\end_layout

\begin_layout Plain Layout

        return firstName;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    public void setFirstName(String firstName) {
\end_layout

\begin_layout Plain Layout

        this.firstName = firstName;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    public String getLastName() {
\end_layout

\begin_layout Plain Layout

        return lastName;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    public void setLastName(String lastName) {
\end_layout

\begin_layout Plain Layout

        this.lastName = lastName;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
Important:
\end_layout

\begin_layout Standard
Everything in our code depends on these models – it is worth spending the
 most time making sure these models are accurate and well-formed.
 The majority of errors from beginners in Spring come from small mistakes
 in models!
\end_layout

\begin_layout Subsection
Writing the Actor Repository
\end_layout

\begin_layout Standard
Now that we have a model, we need to be able to represent the link between
 that model and the database – this is where repositories come in.
 First, lets make a package to house our repositories.
 Right clicking on our root package (e.g.
 
\emph on
com.softwareinstitute.sakila
\emph default
) and selecting 
\emph on
New
\emph default
 → 
\emph on
Package
\emph default
, we enter the name 
\emph on
repositories
\emph default
 so that our full package name is, for example, 
\emph on
com.softwareinstitute.sakila.repositories
\emph default
.
\end_layout

\begin_layout Standard
We can now right click on our new package and select 
\emph on
New
\emph default
 → 
\emph on
Java Class
\emph default
, entering 
\emph on
ActorRepository
\emph default
 as the name.
 There is no requirement for it to be called this, however it is good practice
 to adopt a system for naming things, and across the Spring ecosystem the
 naming system 
\emph on
ModelRepository
\emph default
 is common.
 This should be created as an interface, however if you forget to do this
 it's an easy change afterwards.
\end_layout

\begin_layout Standard
In order for this to adopt some functionality, we should change it so it
 becomes a sub-interface of 
\emph on
JpaRepository<T, ID>
\emph default
.
 When we do this, our repository looks like this:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

\emph on
ActorRepository.java
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

package com.softwareinstitute.sakila.repositories;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import com.softwareinstitute.sakila.models.Actor;
\end_layout

\begin_layout Plain Layout

import org.springframework.data.jpa.repository.JpaRepository;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public interface ActorRepository extends JpaRepository<Actor, Integer> {
 }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Notice how we specify with 
\emph on
JpaRepository<T, ID>
\emph default
 two types.
 The first type, 
\emph on
T
\emph default
, is the model we wish to connect to the database.
 Of course, in this case we are using our just created 
\emph on
Actor
\emph default
 model.
 The second type, 
\emph on
ID
\emph default
, is the type used for the primary key in the database.
 In this case, our ID uses an integer to represent it, so we specify the
 Java type 
\emph on
Integer
\emph default
.
\end_layout

\begin_layout Standard
Done! We can now access our database from the code of our application –
 however it doesn't do much yet.
\end_layout

\begin_layout Section
Writing your First Controller
\end_layout

\begin_layout Subsection
Writing the Controller Class
\end_layout

\begin_layout Standard
A controller allows us to make requests to our site and return with appropriate
 information.
 Again, it is sensible to bundle controllers together in a package.
 Right click the root package and select 
\emph on
New
\emph default
 → 
\emph on
Package
\emph default
.
 Enter 
\emph on
controllers
\emph default
 so that the full package name is 
\emph on
com.softwareinstitute.sakila.controllers
\emph default
.
 Then right click the new package and select 
\emph on
New
\emph default
 → 
\emph on
Java Class
\emph default
.
 Name it ActorController.
\end_layout

\begin_layout Standard
In this class, we need to tell Spring that this is a RESTful controller,
 and that this should be made available online at a particular path.
 We can do this by annotating the class:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

\emph on
ActorController.java
\emph default
 with it's initial annotations.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

package com.softwareinstitute.sakila.controllers;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import org.springframework.web.bind.annotation.RequestMapping;
\end_layout

\begin_layout Plain Layout

import org.springframework.web.bind.annotation.RestController;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@RestController
\end_layout

\begin_layout Plain Layout

@RequestMapping(path = "/actors")
\end_layout

\begin_layout Plain Layout

public class ActorController {
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At this stage, it would be a good idea to understand what we are planning
 to serve to the users.
 In this guide, I will follow the traditional RESTful approach:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="right" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Path
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HTTP Method
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
/actors
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GET
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Get a list of all actors
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
/actors
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
POST
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Create a new actor
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
/actors/1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GET
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Get a single actor, specified by the ID in the URL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
/actors/1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DELETE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Delete an actor, specified by the ID in the URL
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Lets consider what we want to do to achieve the list of all actors.
 We need to receive the request, fetch all actors from the database, then
 respond to the request with the list as JSON.
 Thankfully Spring does most of this for us.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

\emph on
ActorController.java
\emph default
 with the 
\emph on
getAll
\emph default
 path defined.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

package com.softwareinstitute.sakila.controllers;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import com.softwareinstitute.sakila.dtos.ActorDto;
\end_layout

\begin_layout Plain Layout

import com.softwareinstitute.sakila.repositories.ActorRepository;
\end_layout

\begin_layout Plain Layout

import org.springframework.web.bind.annotation.GetMapping;
\end_layout

\begin_layout Plain Layout

import org.springframework.web.bind.annotation.RequestMapping;
\end_layout

\begin_layout Plain Layout

import org.springframework.web.bind.annotation.RestController;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import java.util.List;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@RestController
\end_layout

\begin_layout Plain Layout

@RequestMapping(path = "/actors")
\end_layout

\begin_layout Plain Layout

public class ActorController {
\end_layout

\begin_layout Plain Layout

    private final ActorRepository actorRepository;
\end_layout

\begin_layout Plain Layout

    public ActorController(ActorRepository actorRepository) {
\end_layout

\begin_layout Plain Layout

        this.actorRepository = actorRepository;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    @GetMapping("")
\end_layout

\begin_layout Plain Layout

    public List<ActorDto> getAll() {
\end_layout

\begin_layout Plain Layout

        return actorRepository.findAll()
\end_layout

\begin_layout Plain Layout

                .stream().map(ActorDto::new)
\end_layout

\begin_layout Plain Layout

                .toList();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this listing, lines 14-17 give us access to our repository from earlier.
 Spring has already connected this to the database for us, so we can now
 make use of it.
 Note that it is defined as 
\emph on
final
\emph default
.
 This simply means that once it has been defined, it cannot be redefined.
\end_layout

\begin_layout Standard
In lines 20-24, you may ask why we return a list of 
\emph on
ActorDto
\emph default
 rather than a list of 
\emph on
Actor
\emph default
.
 In Spring, it is bad practice to return database models and can lead to
 some security issues.
 As such, we need to use data transfer object (DTO) to represent the same
 data in a safe way.
 Lines 21-23 are then taking the 
\emph on
List<Actor>
\emph default
 returned by 
\emph on
findAll()
\emph default
 and converting it to a 
\emph on
List<ActorDto>
\emph default
 by calling the constructor on 
\emph on
ActorDto
\emph default
 for each 
\emph on
Actor
\emph default
 in the database.
\end_layout

\begin_layout Subsection
Writing the Actor DTO (Data Transfer Object)
\end_layout

\begin_layout Standard
In order to facilitate our request, we need a DTO.
 First make a 
\emph on
com.softwareinstitute.sakila.dtos
\emph default
 package, then a new Java class inside called 
\emph on
ActorDto
\emph default
.
\end_layout

\begin_layout Standard
Our DTO needs three things: the data we are holding, getters for that data,
 and a way of making the DTO.
 We can define this in pure Java:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

\emph on
ActorDto.java
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

package com.softwareinstitute.sakila.dtos;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import com.softwareinstitute.sakila.models.Actor;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class ActorDto {
\end_layout

\begin_layout Plain Layout

    private final Integer id;
\end_layout

\begin_layout Plain Layout

    private final String firstName;
\end_layout

\begin_layout Plain Layout

    private final String lastName;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public ActorDto(Actor a) {
\end_layout

\begin_layout Plain Layout

        this.id = a.getActorId();
\end_layout

\begin_layout Plain Layout

        this.firstName = a.getFirstName();
\end_layout

\begin_layout Plain Layout

        this.lastName = a.getLastName();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public Integer getId() {
\end_layout

\begin_layout Plain Layout

        return id;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    public String getFirstName() {
\end_layout

\begin_layout Plain Layout

        return firstName;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    public String getLastName() {
\end_layout

\begin_layout Plain Layout

        return lastName;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can see in lines 10-14 that this defines how we get from an 
\emph on
Actor
\emph default
 to an 
\emph on
ActorDto
\emph default
 by calling the constructor.
\end_layout

\begin_layout Subsection
Writing the Actor Create DTO
\end_layout

\begin_layout Standard
If we need DTOs to use for the API, we also need a DTO to accept data from
 the user.
 This also ensures that in more complex data objects the user doesn't submit
 any data we don't them to have.
 This looks very similar to the 
\emph on
ActorDto
\emph default
, except with setters as well.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

\emph on
ActorCreateDto.java
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

package com.softwareinstitute.sakila.dtos;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class ActorCreateDto {
\end_layout

\begin_layout Plain Layout

    private String firstName;
\end_layout

\begin_layout Plain Layout

    private String lastName;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public String getFirstName() {
\end_layout

\begin_layout Plain Layout

        return firstName;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    public void setFirstName(String firstName) {
\end_layout

\begin_layout Plain Layout

        this.firstName = firstName;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    public String getLastName() {
\end_layout

\begin_layout Plain Layout

        return lastName;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    public void setLastName(String lastName) {
\end_layout

\begin_layout Plain Layout

        this.lastName = lastName;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Writing the Actor Create Route
\end_layout

\begin_layout Standard
Now we have the DTO, we can write the route to create an actor.
 See the following code:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

\emph on
ActorController.java
\emph default
 snippet for 
\emph on
create
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

    @PostMapping("")
\end_layout

\begin_layout Plain Layout

    public ActorDto create(@RequestBody ActorCreateDto actorCreateDto) {
\end_layout

\begin_layout Plain Layout

        Actor a = new Actor();
\end_layout

\begin_layout Plain Layout

        a.setFirstName(actorCreateDto.getFirstName());
\end_layout

\begin_layout Plain Layout

        a.setLastName(actorCreateDto.getLastName());
\end_layout

\begin_layout Plain Layout

        return new ActorDto(actorRepository.save(a));
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At this point, a pattern is emerging.
 The 
\emph on
@XXXMapping
\emph default
 annotation defines which HTTP method the request will be for, the path
 specified in the brackets as a child of the path specified in 
\emph on
@RequestMapping(...)
\emph default
 for the whole class.
 We can accept a JSON body as a payload with the 
\emph on
@RequestBody
\emph default
 annotation and can accept the 
\emph on
ActorCreateDto
\emph default
 here.
 We then construct an 
\emph on
Actor
\emph default
, which is suitable for our database and ask the 
\emph on
ActorRepository
\emph default
 to save it, returning it as a DTO.
\end_layout

\begin_layout Subsection
Outcome
\end_layout

\begin_layout Standard
As a result of our two routes, we can now make requests to our endpoint:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "numbers=left,basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

HTTP request to /actors
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

GET /actors HTTP/1.1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

HTTP/1.1 200
\end_layout

\begin_layout Plain Layout

Content-Type: application/json
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

[
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

        "firstName": "PENELOPE",
\end_layout

\begin_layout Plain Layout

        "id": 1,
\end_layout

\begin_layout Plain Layout

        "lastName": "GUINESS"
\end_layout

\begin_layout Plain Layout

    },
\end_layout

\begin_layout Plain Layout

    {
\end_layout

\begin_layout Plain Layout

        "firstName": "NICK",
\end_layout

\begin_layout Plain Layout

        "id": 2,
\end_layout

\begin_layout Plain Layout

        "lastName": "WAHLBERG"
\end_layout

\begin_layout Plain Layout

    },
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And we can also create a new actor by providing a request payload:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "numbers=left,basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
HTTP POST request to /actors
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

POST /actors HTTP/1.1
\end_layout

\begin_layout Plain Layout

Accept: application/json, */*;q=0.5
\end_layout

\begin_layout Plain Layout

Content-Length: 46
\end_layout

\begin_layout Plain Layout

Content-Type: application/json
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    "firstName": "Obi-Wan",
\end_layout

\begin_layout Plain Layout

    "lastName": "Kenobi"
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

HTTP/1.1 200
\end_layout

\begin_layout Plain Layout

Content-Type: application/json
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    "firstName": "Obi-Wan",
\end_layout

\begin_layout Plain Layout

    "id": 201,
\end_layout

\begin_layout Plain Layout

    "lastName": "Kenobi"
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We can see from this example that the actor has been created and has been
 assigned ID 201.
 This can be confirmed through inspection of the database.
\end_layout

\begin_layout Standard
The individual actor fetch and actor delete endpoints are left as an exercise
 to the reader.
\end_layout

\begin_layout Section
DRY (Don't Repeat Yourself)
\end_layout

\begin_layout Paragraph*
Important!
\end_layout

\begin_layout Standard
Before reading this section, you 
\emph on
must
\emph default
 understand everything that comes before it.
 This section will explain how to save considerable time and effort, but
 is only valuable to a develop who understands what it is doing.
\end_layout

\begin_layout Standard
At this point in your Spring journey, you surely are thinking 
\begin_inset Quotes eld
\end_inset

do I 
\emph on
really
\emph default
 need to write 
\emph on
that much
\emph default
 for every single part of the database?
\begin_inset Quotes erd
\end_inset

.
 The simple answer is no.
 A lot of the code we have written is boilerplate, and Lombok can write
 it for us.
\end_layout

\begin_layout Subsection
Writing your Second Model and Repository
\end_layout

\begin_layout Standard
Let's write a model for a film.
 From the database, it looks like can be seen in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:film-erd"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:film-erd"

\end_inset

A partial ERD centered on the 
\emph on
film
\emph default
 table.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename guide-images/film-erd.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's write this in Java, but with some help from Lombok.
 Our model ends up looking like this:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

\emph on
Film.java
\emph default
 with Lombok
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

package com.softwareinstitute.sakila.models;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import jakarta.persistence.Entity;
\end_layout

\begin_layout Plain Layout

import jakarta.persistence.GeneratedValue;
\end_layout

\begin_layout Plain Layout

import jakarta.persistence.GenerationType;
\end_layout

\begin_layout Plain Layout

import jakarta.persistence.Id;
\end_layout

\begin_layout Plain Layout

import lombok.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import java.math.BigDecimal;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@Entity
\end_layout

\begin_layout Plain Layout

@RequiredArgsConstructor
\end_layout

\begin_layout Plain Layout

@Getter
\end_layout

\begin_layout Plain Layout

@Setter
\end_layout

\begin_layout Plain Layout

public class Film {
\end_layout

\begin_layout Plain Layout

    @Id
\end_layout

\begin_layout Plain Layout

    @GeneratedValue(strategy = GenerationType.IDENTITY)
\end_layout

\begin_layout Plain Layout

    private Integer filmId;
\end_layout

\begin_layout Plain Layout

    private String title;
\end_layout

\begin_layout Plain Layout

    private String description;
\end_layout

\begin_layout Plain Layout

    private Integer releaseYear;
\end_layout

\begin_layout Plain Layout

    private Integer rentalDuration;
\end_layout

\begin_layout Plain Layout

    private BigDecimal rentalRate;
\end_layout

\begin_layout Plain Layout

    private Integer length;
\end_layout

\begin_layout Plain Layout

    private BigDecimal replacementCost;
\end_layout

\begin_layout Plain Layout

    private String rating;
\end_layout

\begin_layout Plain Layout

    private String specialFeatures;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A significant improvement over having to write however-many getters and
 setters.
 We can now focus on just what matters.
 Our repository is already fairly short, so stays pretty much the same:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

\emph on
FilmRepository.java
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

package com.softwareinstitute.sakila.repositories;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import com.softwareinstitute.sakila.models.Film;
\end_layout

\begin_layout Plain Layout

import org.springframework.data.jpa.repository.JpaRepository;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public interface FilmRepository extends JpaRepository<Film, Integer> { }
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Writing your Second Controller
\end_layout

\begin_layout Standard
In order to create a second controller, we need to create our 
\emph on
FilmDto
\emph default
 and 
\emph on
FilmCreateDto
\emph default
 classes first.
 They look similar, but again a lot less boilerplate code:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

\emph on
FilmDto.java
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

package com.softwareinstitute.sakila.dtos;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import com.softwareinstitute.sakila.models.Film;
\end_layout

\begin_layout Plain Layout

import lombok.Data;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import java.math.BigDecimal;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@Data
\end_layout

\begin_layout Plain Layout

public class FilmDto {
\end_layout

\begin_layout Plain Layout

    private final Integer id;
\end_layout

\begin_layout Plain Layout

    private final String title;
\end_layout

\begin_layout Plain Layout

    private final String description;
\end_layout

\begin_layout Plain Layout

    private final Integer releaseYear;
\end_layout

\begin_layout Plain Layout

    private final Integer rentalDuration;
\end_layout

\begin_layout Plain Layout

    private final BigDecimal rentalRate;
\end_layout

\begin_layout Plain Layout

    private final Integer length;
\end_layout

\begin_layout Plain Layout

    private final BigDecimal replacementCost;
\end_layout

\begin_layout Plain Layout

    private final String rating;
\end_layout

\begin_layout Plain Layout

    private final String specialFeatures;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public FilmDto(Film f) {
\end_layout

\begin_layout Plain Layout

        this.id = f.getFilmId();
\end_layout

\begin_layout Plain Layout

        this.title = f.getTitle();
\end_layout

\begin_layout Plain Layout

        this.description = f.getDescription();
\end_layout

\begin_layout Plain Layout

        this.releaseYear = f.getReleaseYear();
\end_layout

\begin_layout Plain Layout

        this.rentalDuration = f.getRentalDuration();
\end_layout

\begin_layout Plain Layout

        this.rentalRate = f.getRentalRate();
\end_layout

\begin_layout Plain Layout

        this.length = f.getLength();
\end_layout

\begin_layout Plain Layout

        this.replacementCost = f.getReplacementCost();
\end_layout

\begin_layout Plain Layout

        this.rating = f.getRating();
\end_layout

\begin_layout Plain Layout

        this.specialFeatures = f.getSpecialFeatures();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

\emph on
FilmCreateDto.java
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

package com.softwareinstitute.sakila.dtos;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import lombok.Data;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import java.math.BigDecimal;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@Data
\end_layout

\begin_layout Plain Layout

public class FilmCreateDto {
\end_layout

\begin_layout Plain Layout

    private String title;
\end_layout

\begin_layout Plain Layout

    private String description;
\end_layout

\begin_layout Plain Layout

    private Integer releaseYear;
\end_layout

\begin_layout Plain Layout

    private Integer rentalDuration;
\end_layout

\begin_layout Plain Layout

    private BigDecimal rentalRate;
\end_layout

\begin_layout Plain Layout

    private Integer length;
\end_layout

\begin_layout Plain Layout

    private BigDecimal replacementCost;
\end_layout

\begin_layout Plain Layout

    private String rating;
\end_layout

\begin_layout Plain Layout

    private String specialFeatures;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And then our controller can also benefit from such improvements:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

\emph on
FilmController.java
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

package com.softwareinstitute.sakila.controllers;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import com.softwareinstitute.sakila.dtos.FilmCreateDto;
\end_layout

\begin_layout Plain Layout

import com.softwareinstitute.sakila.dtos.FilmDto;
\end_layout

\begin_layout Plain Layout

import com.softwareinstitute.sakila.models.Film;
\end_layout

\begin_layout Plain Layout

import com.softwareinstitute.sakila.repositories.FilmRepository;
\end_layout

\begin_layout Plain Layout

import lombok.RequiredArgsConstructor;
\end_layout

\begin_layout Plain Layout

import org.springframework.http.HttpStatus;
\end_layout

\begin_layout Plain Layout

import org.springframework.web.bind.annotation.*;
\end_layout

\begin_layout Plain Layout

import org.springframework.web.server.ResponseStatusException;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

import java.util.List;
\end_layout

\begin_layout Plain Layout

import java.util.Optional;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@RestController
\end_layout

\begin_layout Plain Layout

@RequestMapping("/films")
\end_layout

\begin_layout Plain Layout

@RequiredArgsConstructor
\end_layout

\begin_layout Plain Layout

public class FilmController {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    private final FilmRepository filmRepository;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    @GetMapping("")
\end_layout

\begin_layout Plain Layout

    public List<FilmDto> getAll() {
\end_layout

\begin_layout Plain Layout

        return filmRepository.findAll()
\end_layout

\begin_layout Plain Layout

                .stream().map(FilmDto::new)
\end_layout

\begin_layout Plain Layout

                .toList();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    @PostMapping("")
\end_layout

\begin_layout Plain Layout

    public FilmDto create(@RequestBody FilmCreateDto filmCreateDto) {
\end_layout

\begin_layout Plain Layout

        Film a = new Film();
\end_layout

\begin_layout Plain Layout

        return new FilmDto(filmRepository.save(a));
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    @GetMapping("/{id}")
\end_layout

\begin_layout Plain Layout

    public FilmDto getOne(@PathVariable("id") Integer id) {
\end_layout

\begin_layout Plain Layout

        Optional<FilmDto> filmDto = filmRepository.findById(id)
\end_layout

\begin_layout Plain Layout

                .map(FilmDto::new);
\end_layout

\begin_layout Plain Layout

        if (filmDto.isEmpty()) {
\end_layout

\begin_layout Plain Layout

            throw new ResponseStatusException(HttpStatus.NOT_FOUND);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        return filmDto.get();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    @DeleteMapping("/{id}")
\end_layout

\begin_layout Plain Layout

    public void deleteOne(@PathVariable("id") Integer id) {
\end_layout

\begin_layout Plain Layout

        filmRepository.deleteById(id);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Deployment
\end_layout

\begin_layout Section
Preparing for Any Deployment
\end_layout

\begin_layout Standard
Before we can deploy to a platform, our project needs to be ready.
 We need to take the following actions:
\end_layout

\begin_layout Itemize
Ensure that the compiled form of our project will be using the correct Java
 version.
\end_layout

\begin_layout Itemize
Enable our 
\emph on
application.properties
\emph default
 to be able to point at different places our database could be.
\end_layout

\begin_layout Subsection
Compiling with the Correct Java Version
\end_layout

\begin_layout Standard
In order to make sure we compile with the correct Java version, we need
 to go into our 
\emph on
pom.xml
\emph default
 file, which defines how the program is built.
 From here, we need to locate the 
\emph on
<properties>...</properties>
\emph default
 tag, as this is where we define the Java version.
 We then need to add the following properties:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=XML,numbers=left,basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

\emph on
pom.xml
\emph default
 additions for specifying the Java version
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

<properties>
\end_layout

\begin_layout Plain Layout

    <!-- other properties...
 -->
\end_layout

\begin_layout Plain Layout

    <maven.compiler.source>17</maven.compiler.source>
\end_layout

\begin_layout Plain Layout

    <maven.compiler.target>17</maven.compiler.target>
\end_layout

\begin_layout Plain Layout

</properties>
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Dynamic Database Location
\end_layout

\begin_layout Standard
To allow us to configure where the database might be at runtime, we can
 use environment variables.
 These can be accessed directly from our 
\emph on
application.properties
\emph default
 file.
 Change your application.properties to:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "numbers=left,basicstyle={\ttfamily}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout

Updated 
\emph on
application.properties
\emph default
 for deployment
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

spring.datasource.url=
\backslash

\end_layout

\begin_layout Plain Layout

jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/${MYSQL_DATABASE:sakila}
\end_layout

\begin_layout Plain Layout

spring.datasource.username=${MYSQL_USERNAME:sakila}
\end_layout

\begin_layout Plain Layout

spring.datasource.password=${MYSQL_PASSWORD:tsi}
\end_layout

\begin_layout Plain Layout

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
\end_layout

\begin_layout Plain Layout

spring.jpa.show-sql=${MYSQL_DEBUG:false}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This allows us to change the database hostname, port, username, password
 and database name through environment variables.
 It also lets us adjust the debug mode value, which can show us the SQL
 being executed.
 Note that we have broken the database URL across two lines here for readability
 – you do not need to do this to achieve the same result.
\end_layout

\begin_layout Section
Deployment to Azure
\end_layout

\begin_layout Standard
This guide assumes that the user already has an 
\begin_inset CommandInset href
LatexCommand href
name "Azure"
target "https://azure.com"
literal "false"

\end_inset

 account.
\end_layout

\begin_layout Subsection
Host the backend API
\end_layout

\begin_layout Enumerate
Within your Spring project, run the following command: 
\emph on
mvn com.microsoft.azure:azure-webapp-maven-plugin:2.5.0:config
\end_layout

\begin_layout Enumerate
When your browser appears, sign in to Azure.
\end_layout

\begin_layout Enumerate
When asked, select Linux and Java 17.
\end_layout

\begin_layout Enumerate
For the pricing tier, select either Basic 1 (B1, option 1) or Free 1 (F1,
 option 8).
 I recommend the latter to save on using your free Azure credit.
\end_layout

\begin_layout Enumerate
Confirm your choices with "y".
\end_layout

\begin_layout Enumerate
Deploy your app (even though it 
\emph on
will
\emph default
 be broken as it is not yet configured for your database): 
\emph on
mvn package azure-webapp:deploy
\end_layout

\begin_layout Enumerate
Again, sign in when your browser appears.
\end_layout

\begin_layout Enumerate
Go to the 
\begin_inset CommandInset href
LatexCommand href
name "Azure Portal"
target "https://portal.azure.com"
literal "false"

\end_inset

 and find your app resource.
\end_layout

\begin_layout Enumerate
Find 
\begin_inset Quotes eld
\end_inset

CORS
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
In 
\begin_inset Quotes eld
\end_inset

Allowed Origins
\begin_inset Quotes erd
\end_inset

, add 
\begin_inset Quotes eld
\end_inset

*
\begin_inset Quotes erd
\end_inset

.
 Click 
\begin_inset Quotes eld
\end_inset

Save
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
Host the database
\end_layout

\begin_layout Subsubsection
Create the Azure MySQL Database
\end_layout

\begin_layout Enumerate
From the Azure Portal, select 
\begin_inset Quotes eld
\end_inset

Create a resource
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Search for 
\begin_inset Quotes eld
\end_inset

Azure Database for MySQL".
\end_layout

\begin_layout Enumerate
Select 
\begin_inset Quotes eld
\end_inset

Create
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Select 
\begin_inset Quotes eld
\end_inset

Single server
\begin_inset Quotes erd
\end_inset

 and press 
\begin_inset Quotes eld
\end_inset

Create
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Select the Resource Group that was automatically created when the app was
 deployed.
\end_layout

\begin_layout Enumerate
Enter a server name - it can be anything but will become part of the database
 URL.
\end_layout

\begin_layout Enumerate
Choose Version 8.0.
\end_layout

\begin_layout Enumerate

\series bold
IMPORTANT
\series default
: Make sure you configure your server to something appropriate, otherwise
 you could be charged a lot of money!
\end_layout

\begin_layout Enumerate
Select 
\begin_inset Quotes eld
\end_inset

Basic
\begin_inset Quotes erd
\end_inset

 tier.
 I recommend selecting the lowest values for everything as this is plenty
 for a small scale service.
 The estimated monthly cost should only be able 26 USD.
\end_layout

\begin_layout Enumerate
Press 
\begin_inset Quotes eld
\end_inset

Review + Create,
\begin_inset Quotes erd
\end_inset

 then 
\begin_inset Quotes eld
\end_inset

Create
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Wait for Azure to finish deploying the database.
 Then select 
\begin_inset Quotes eld
\end_inset

Go to resource.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsubsection
Configure the Firewall
\end_layout

\begin_layout Enumerate
Once the database is created...
\end_layout

\begin_layout Enumerate
Go to the 
\begin_inset Quotes eld
\end_inset

Connection security
\begin_inset Quotes erd
\end_inset

 settings.
\end_layout

\begin_layout Enumerate
Choose 
\begin_inset Quotes eld
\end_inset

Yes
\begin_inset Quotes erd
\end_inset

 for 
\begin_inset Quotes eld
\end_inset

Allow access to Azure services
\begin_inset Quotes erd
\end_inset

, and click 
\begin_inset Quotes eld
\end_inset

Add current client IP address
\begin_inset Quotes erd
\end_inset

.
 This is allowing connections from your current connection (so we can initialise
 the sakila data), and from other Azure services (for the app to connect
 to).
\end_layout

\begin_layout Enumerate
Select 
\begin_inset Quotes eld
\end_inset

Save
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection
Configure the database for sakila
\end_layout

\begin_layout Enumerate
Go to the 
\begin_inset Quotes eld
\end_inset

Server parameters
\begin_inset Quotes erd
\end_inset

 settings:
\end_layout

\begin_layout Enumerate
Search for 
\emph on
log_bin_trust_function_creators
\emph default
 and set to ON
\begin_inset Foot
status open

\begin_layout Plain Layout
This allows the 
\emph on
sakila-schema.sql
\emph default
 script to load the sakila database in to the server without being blocked
 by the default Azure set-up, which prevents triggers being used from users
 not granted the SUPER permission.
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
Select 
\begin_inset Quotes eld
\end_inset

Save
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection
Add the sakila data
\end_layout

\begin_layout Enumerate
Download the 
\begin_inset CommandInset href
LatexCommand href
name "sakila data"
target "https://downloads.mysql.com/docs/sakila-db.zip"
literal "false"

\end_inset

.
 Extract it - we will need the 
\emph on
sakila-schema.sql
\emph default
 and 
\emph on
sakila-data.sql
\emph default
 scripts for this step.
\end_layout

\begin_layout Enumerate
Open MySQL Workbench.
 Add a new connection with the (+) button.
\end_layout

\begin_layout Enumerate
Enter the hostname, which is the name of your Azure database as a URL.
 In this example, the database is called 
\emph on
sakila-database-example
\emph default
, so the hostname is: 
\emph on
sakila-database-example.mysql.database.azure.com
\emph default
.
\end_layout

\begin_layout Enumerate
Enter the username, which is the username you entered during setup, then
 the name of your database.
 For this example: 
\emph on
tsi@sakila-database-example
\emph default
.
\end_layout

\begin_layout Enumerate
Connect to the database and enter your password when required.
\end_layout

\begin_layout Enumerate
Go to 
\begin_inset Quotes eld
\end_inset

File
\begin_inset Quotes erd
\end_inset

 > 
\begin_inset Quotes eld
\end_inset

Open SQL Script...
\begin_inset Quotes erd
\end_inset

 and select the 
\emph on
sakila-schema.sql
\emph default
 file.
 Run this query.
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

Query Completed
\begin_inset Quotes erd
\end_inset

 should appear in the bottom-left of the window.
\end_layout

\begin_layout Enumerate
Go to 
\begin_inset Quotes eld
\end_inset

File
\begin_inset Quotes erd
\end_inset

 > 
\begin_inset Quotes eld
\end_inset

Open SQL Script...
\begin_inset Quotes erd
\end_inset

 and select the 
\emph on
sakila-data.sql
\emph default
 file.
 Run this query.
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

Query Completed
\begin_inset Quotes erd
\end_inset

 should appear in the bottom-left of the window.
\end_layout

\begin_layout Enumerate
The database is now ready.
\end_layout

\begin_layout Subsection
Connecting the backend to the database
\end_layout

\begin_layout Enumerate
Go to the Azure Portal and find your app resource.
\end_layout

\begin_layout Enumerate
Find 
\begin_inset Quotes eld
\end_inset

Configuration
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Add the following 
\begin_inset Quotes eld
\end_inset

Application Setting
\begin_inset Quotes erd
\end_inset

s.
\begin_inset Newline newline
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="right" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MYSQL_HOST
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
sakila-database-example.mysql.database.azure.com
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MYSQL_USERNAME
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
tsi@sakila-database-example
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MYSQL_PASSWORD
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the password you entered when setting up the database
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Enumerate
Your project is deployed!
\end_layout

\begin_layout Section
Deployment to AWS
\end_layout

\begin_layout Enumerate
Create a clean JAR package to deploy with: 
\emph on
mvn clean package spring-boot:repackage
\end_layout

\begin_layout Enumerate
Sign in to the AWS Management Console, and then open the Elastic Beanstalk
 console.
\end_layout

\begin_layout Enumerate
Choose 
\begin_inset Quotes eld
\end_inset

Create New Application
\begin_inset Quotes erd
\end_inset

.
 Enter a suitable name and click 
\begin_inset Quotes eld
\end_inset

Next
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Select 
\begin_inset Quotes eld
\end_inset

Create web server
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Select 
\begin_inset Quotes eld
\end_inset

Java
\begin_inset Quotes erd
\end_inset

 from 
\begin_inset Quotes eld
\end_inset

Predefined configuration
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

Load balancing, auto scaling
\begin_inset Quotes erd
\end_inset

 for the 
\begin_inset Quotes eld
\end_inset

Environment type
\begin_inset Quotes erd
\end_inset

.
 Select 
\begin_inset Quotes eld
\end_inset

Change platform version
\begin_inset Quotes erd
\end_inset

 and select 
\begin_inset Quotes eld
\end_inset

Java 17
\begin_inset Quotes erd
\end_inset

.
 Click 
\begin_inset Quotes eld
\end_inset

Next
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Select 
\begin_inset Quotes eld
\end_inset

Upload your own
\begin_inset Quotes erd
\end_inset

 and upload the JAR file in the 
\emph on
target
\emph default
 directory of your project.
\end_layout

\begin_layout Enumerate
Choose an environment name and URL that is available.
 Click 
\begin_inset Quotes eld
\end_inset

Next
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Check both 
\begin_inset Quotes eld
\end_inset

Create an RDS DB Instance with this environment
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

Create this environment inside a VPC
\begin_inset Quotes erd
\end_inset

.
 Click 
\begin_inset Quotes eld
\end_inset

Next
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Select 
\begin_inset Quotes eld
\end_inset

Instance type
\begin_inset Quotes erd
\end_inset

 to 
\begin_inset Quotes eld
\end_inset

t2.small
\begin_inset Quotes erd
\end_inset

 and set 
\begin_inset Quotes eld
\end_inset

Application health check URL
\begin_inset Quotes erd
\end_inset

 to 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

.
 Click 
\begin_inset Quotes eld
\end_inset

Next
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Click 
\begin_inset Quotes eld
\end_inset

Next
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Select 
\begin_inset Quotes eld
\end_inset

DB engine
\begin_inset Quotes erd
\end_inset

 to 
\begin_inset Quotes eld
\end_inset

mysql
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

Instance class
\begin_inset Quotes erd
\end_inset

 to 
\begin_inset Quotes eld
\end_inset

db.t2.small
\begin_inset Quotes erd
\end_inset

.
 Enter a username and password.
 Click 
\begin_inset Quotes eld
\end_inset

Next
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Check 
\begin_inset Quotes eld
\end_inset

Associate Public IP Address
\begin_inset Quotes erd
\end_inset

.
 For 
\begin_inset Quotes eld
\end_inset

VPC security group
\begin_inset Quotes erd
\end_inset

 select the default security group already created for your default VPC.
 Click 
\begin_inset Quotes eld
\end_inset

Next
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Click 
\begin_inset Quotes eld
\end_inset

Next
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
On the Configuration page in your environment, under Software Configuration,
 click the settings icon.
\end_layout

\begin_layout Enumerate
Find 
\begin_inset Quotes eld
\end_inset

Environment Properties
\begin_inset Quotes erd
\end_inset

.
 Add new properties with the following details.
\begin_inset Newline newline
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="right" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SERVER_PORT
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5000
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
MYSQL_HOST
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Environment Configuration → Data Tier → RDS → Endpoint
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
MYSQL_USER
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
your RDS username from earlier
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
MYSQL_PASSWORD
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
your RDS password from earlier
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Enumerate
Loading the default data into the database is left as an exercise to the
 reader.
\end_layout

\begin_layout Enumerate
You are deployed on AWS!
\end_layout

\begin_layout Section
Deployment to Docker Container
\end_layout

\begin_layout Paragraph
Why?
\end_layout

\begin_layout Standard
By deploying to a Docker container, you open up the ability to host your
 microservice on any platform supporting container images.
 Azure and AWS both support Docker containers directly.
 You could also deploy to a Kubernetes cluster, which would allow scaling
 up to a huge size (think Google).
\end_layout

\begin_layout Standard
In Spring, deployment to Docker container is very easy...
\end_layout

\begin_layout Enumerate
Open a terminal in the root project directory.
\end_layout

\begin_layout Enumerate
Run: 
\emph on
mvn spring-boot:build-image
\end_layout

\begin_layout Enumerate
The image is built and can be pushed, deployed, tagged, etc.
 as you wish.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Extra Exercises
\end_layout

\begin_layout Standard
If this has just whet your appetite for more Java, consider some of these
 tasks as ways to extend your project and it's functionality.
 Some pointers to guides will be included, including a level of difficulty
 for each.
\end_layout

\begin_layout Section*
Model the Database (easy)
\end_layout

\begin_layout Paragraph*
Brief
\end_layout

\begin_layout Standard
Model the remainder of the database and all relationships between each table.
\end_layout

\begin_layout Paragraph*
Hints
\end_layout

\begin_layout Standard
The most important thing to focus on when modelling relationships is having
 accurate and well written models – focus on this!
\end_layout

\begin_layout Section*
Authentication and Authorisation (hard)
\end_layout

\begin_layout Paragraph*
Brief
\end_layout

\begin_layout Standard
Modern web APIs often cannot afford to let anyone access them – imagine
 if anyone could make a bank transaction for you! Implement authentication
 and authorisation to your API – you can decide what needs authorisation,
 whether that be all of it or only parts.
\end_layout

\begin_layout Paragraph*
Hints
\end_layout

\begin_layout Standard
One approach might use JSON Web Tokens (JWT), which a guide like 
\begin_inset CommandInset href
LatexCommand href
name "this one from BezKoder"
target "https://www.bezkoder.com/spring-boot-security-jwt/"
literal "false"

\end_inset

 might help.
 Alternatively, you may choose to implement HTTP Basic or Digest authentication.
\end_layout

\end_body
\end_document
